import React, { useState } from 'react';
import GenerationOption from './GenerationOption';

const SubmissionForm = () => {
  const [name, setName] = useState("");
  const [websiteUrl, setWebsiteUrl] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState("");

  const handleSubmit = async () => {
    setError("");
    setIsSubmitting(true);

    // Validation
    if (!name.trim()) {
      setError("Name is required");
      setIsSubmitting(false);
      return;
    }
    if (!websiteUrl.trim()) {
      setError("Website URL is required");
      setIsSubmitting(false);
      return;
    }

    try {
      new URL(websiteUrl);
    } catch {
      setError("Please enter a valid URL");
      setIsSubmitting(false);
      return;
    }

    const payload = {
      name: name.trim(),
      website_url: websiteUrl.trim(),
      amount_paid: 99
    };

    try {
      console.log('Submitting payload:', payload); // Debug log

      const response = await fetch("http://127.0.0.1:8000/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload)
      });

      console.log('Response status:', response.status); // Debug log

      const data = await response.json();
      console.log('Response data:', data); // Debug log

      if (!response.ok) {
        throw new Error(data.detail || 'Submission failed');
      }

      // Success
      alert("Tool submitted successfully!");
      setName("");
      setWebsiteUrl("");
      
    } catch (error) {
      console.error('Submission error:', error);
      setError(
        error.message === 'Failed to fetch'
          ? 'Unable to connect to the server. Please check if the server is running.'
          : `Error: ${error.message}`
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto mt-8 space-y-6">
      <div className="space-y-4">
        {error && (
          <div className="p-3 bg-red-100 border border-red-400 text-red-700 rounded">
            {error}
          </div>
        )}

        <div>
          <label className="block mb-2">
            <span className="text-gray-700">
              <span className="text-red-500">*</span> Name
            </span>
          </label>
          <input
            type="text"
            placeholder="Copy AI"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none"
            required
          />
        </div>

        <div>
          <label className="block mb-2">
            <span className="text-gray-700">
              <span className="text-red-500">*</span> Website URL
            </span>
          </label>
          <input
            type="url"
            placeholder='Please enter the tool url, such as: "https://www.copy.ai"'
            value={websiteUrl}
            onChange={(e) => setWebsiteUrl(e.target.value)}
            className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none"
            required
          />
        </div>
        
        <div>
          <label className="block mb-2">
            <span className="text-gray-700">
              <span className="text-red-500">*</span> Choose how to generate tool information
            </span>
          </label>
          <div className="space-y-3">
            <GenerationOption
              title="Generated by Toolify"
              description="All content and translations are generated by Toolify AI"
            />
            <GenerationOption
              title="Do it myself"
              description="Provide tool information myself in English only, translated by Toolify AI"
              isNew
            />
          </div>
        </div>

        <div className="mt-8 flex justify-between items-center border-t pt-6">
          <div>
            <div className="text-2xl font-bold">Total: $ 99</div>
            <div className="text-gray-600 text-sm">No queue, listed within 48 hours</div>
          </div>
          <button 
            onClick={handleSubmit}
            disabled={isSubmitting}
            className={`px-6 py-2 bg-purple-600 text-white rounded-lg transition-colors
              ${isSubmitting ? 'opacity-50 cursor-not-allowed' : 'hover:bg-purple-700'}`}
          >
            {isSubmitting ? 'Submitting...' : 'Pay $ 99'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default SubmissionForm;